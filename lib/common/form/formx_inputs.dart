import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:tiktok/common/form/core/formx.dart';
import 'package:tiktok/common/form/fields/formx_field_datetime.dart';
import 'package:tiktok/common/form/fields/formx_field_number.dart';
import 'package:tiktok/common/form/fields/formx_field_number_steper.dart';
import 'package:tiktok/common/form/fields/formx_field_regional.dart';
import 'package:tiktok/common/form/fields/formx_field_select.dart';
import 'package:tiktok/common/form/fields/formx_field_switcher.dart';
import 'package:tiktok/common/form/fields/formx_field_text.dart';
import 'package:tiktok/common/form/fields/formx_field_text_captcha.dart';
import 'package:tiktok/common/form/fields/formx_field_text_mobile.dart';
import 'package:tiktok/common/form/fields/formx_field_textarea.dart';
import 'package:tiktok/common/form/formx_validator.dart';
import 'package:tiktok/common/form/formx_widget.dart';
import 'package:tiktok/common/models/option.dart';
import 'package:tiktok/common/widgets/button_sheet/date_picker.dart';

typedef InputBuilder =
    Widget Function(BuildContext context, FormInput parent, int index);

class Input<T> {
  final Widget? child;
  final InputBuilder? builder;
  final Object? debugLabel;
  final bool showOnEnabled;
  final bool hideOnDisabled;

  const Input({
    this.child,
    this.builder,
    this.debugLabel,
    bool? showOnEnabled,
    bool? hideOnDisabled,
  }) : showOnEnabled = showOnEnabled ?? true,
       hideOnDisabled = hideOnDisabled ?? false;

  @override
  String toString() {
    return debugLabel == null
        ? super.toString()
        : "$runtimeType -> <$debugLabel>";
  }

  Widget build(BuildContext context, FormInput parent, int index) {
    return child ??
        builder?.call(context, parent, index) ??
        const SizedBox.shrink();
  }

  factory Input.spacer({
    double height = 12,
    bool? showOnEnabled,
    bool? hideOnDisabled,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "Spacer($height)",
      child: SizedBox(height: height),
    );
  }

  factory Input.builder({
    required InputBuilder builder,
    bool? showOnEnabled,
    bool? hideOnDisabled,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "Builder",
      builder: builder,
    );
  }

  factory Input.customize({
    required Widget child,
    bool? showOnEnabled,
    bool? hideOnDisabled,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "Customize($child)",
      child: child,
    );
  }

  factory Input.leading(
    String text, {
    bool? showOnEnabled,
    bool? hideOnDisabled,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "Leading($text)",
      builder: (ctx, parent, index) => Padding(
        padding: EdgeInsets.only(
          left: 12,
          right: 12,
          top: index == 0 ? 5 : 12,
          bottom: 5,
        ),
        child: Text(text, style: parent.descriptionTextStyle),
      ),
    );
  }

  factory Input.text({
    Key? key,
    required String name,
    required String label,
    String? restorationId,
    String? defaultValue,
    String? placeholder,
    bool? enabled,
    bool required = false,
    bool showClear = true,
    bool showCounter = true,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    int? maxLength,
    Widget? left,
    Icon? leftIcon,
    FocusNode? focusNode,
    TextAlign textAlign = TextAlign.start,
    TextInputType? inputType,
    TextInputAction? inputAction,
    TextEditingController? controller,
    MaxLengthEnforcement? maxLengthEnforcement,
    List<TextInputFormatter>? inputFormatters,
    VoidCallback? onTap,
    VoidCallback? onClear,
    ValueChanged<String?>? onSaved,
    ValueChanged<String?>? onReset,
    ValueChanged<String?>? onChanged,
    ValueChanged<String?>? onSubmitted,
    VoidCallback? onEditingComplete,
    List<Validator<String>>? validator,
    FieldTransformer<String, String>? renderer,
    FieldTransformer<String, String>? converter,
    FieldTransformer<String, String>? transformer,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldText($name)",
      builder: (ctx, parent, index) => FormXFieldText(
        key: key,
        name: name,
        label: label,
        left: left,
        leftIcon: leftIcon,
        empty: parent.empty,
        defaultValue: defaultValue,
        placeholder: placeholder,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        showClear: showClear,
        showCounter: showCounter,
        maxLength: maxLength,
        maxLengthEnforcement: maxLengthEnforcement,
        focusNode: focusNode,
        textAlign: textAlign,
        inputAction: inputAction,
        inputType: inputType,
        inputFormatters: inputFormatters,
        controller: controller,
        validator: validator,
        renderer: renderer,
        converter: converter,
        transformer: transformer,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onTap: onTap,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
        onSubmitted: onSubmitted,
        onEditingComplete: onEditingComplete,
      ),
    );
  }

  factory Input.textarea({
    Key? key,
    required String name,
    required String label,
    String? restorationId,
    String? placeholder,
    bool? enabled,
    bool? showCounter,
    bool required = false,
    bool showClear = true,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    int? maxLines,
    int? maxLength,
    Widget? left,
    Icon? leftIcon,
    FocusNode? focusNode,
    TextAlign textAlign = TextAlign.start,
    TextInputType? inputType,
    TextInputAction? inputAction,
    TextEditingController? controller,
    MaxLengthEnforcement? maxLengthEnforcement,
    List<TextInputFormatter>? inputFormatters,
    VoidCallback? onTap,
    VoidCallback? onClear,
    ValueChanged<String?>? onSaved,
    ValueChanged<String?>? onReset,
    ValueChanged<String?>? onChanged,
    ValueChanged<String?>? onSubmitted,
    VoidCallback? onEditingComplete,
    List<Validator<String>>? validator,
    FieldTransformer<String, String>? renderer,
    FieldTransformer<String, String>? converter,
    FieldTransformer<String, String>? transformer,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldTextArea($name)",
      builder: (ctx, parent, index) => FormXFieldTextArea(
        key: key,
        name: name,
        label: label,
        left: left,
        leftIcon: leftIcon,
        empty: parent.empty,
        placeholder: placeholder,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        showCounter: showCounter,
        maxLines: maxLines,
        maxLength: maxLength,
        maxLengthEnforcement: maxLengthEnforcement,
        focusNode: focusNode,
        textAlign: textAlign,
        inputAction: inputAction,
        inputType: inputType,
        inputFormatters: inputFormatters,
        controller: controller,
        validator: validator,
        renderer: renderer,
        converter: converter,
        transformer: transformer,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onTap: onTap,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
        onSubmitted: onSubmitted,
        onEditingComplete: onEditingComplete,
      ),
    );
  }

  factory Input.mobile({
    Key? key,
    required String name,
    required String label,
    String? restorationId,
    String? placeholder,
    bool? enabled,
    bool required = false,
    bool showClear = true,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    int? maxLines,
    int? maxLength,
    int? coutdown,
    Widget? left,
    Icon? leftIcon,
    FocusNode? focusNode,
    TextAlign textAlign = TextAlign.start,
    TextInputAction? inputAction,
    TextEditingController? controller,
    MaxLengthEnforcement? maxLengthEnforcement,
    VoidCallback? onTap,
    VoidCallback? onClear,
    ValueChanged<String?>? onSaved,
    ValueChanged<String?>? onReset,
    ValueChanged<String?>? onChanged,
    ValueChanged<String?>? onSubmitted,
    VoidCallback? onEditingComplete,
    List<Validator<String>>? validator,
    FieldTransformer<String, String>? renderer,
    FieldTransformer<String, String>? converter,
    FieldTransformer<String, String>? transformer,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldTextArea($name)",
      builder: (ctx, parent, index) => FormXFieldTextMobile(
        key: key,
        name: name,
        label: label,
        left: left,
        leftIcon: leftIcon,
        empty: parent.empty,
        placeholder: placeholder,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        maxLength: maxLength,
        coutdown: coutdown,
        maxLengthEnforcement: maxLengthEnforcement,
        focusNode: focusNode,
        textAlign: textAlign,
        inputAction: inputAction,
        controller: controller,
        validator: validator,
        renderer: renderer,
        converter: converter,
        transformer: transformer,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onTap: onTap,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
        onSubmitted: onSubmitted,
        onEditingComplete: onEditingComplete,
      ),
    );
  }

  factory Input.captcha({
    Key? key,
    required String name,
    required String label,
    String? restorationId,
    String? placeholder,
    bool? enabled,
    bool required = false,
    bool showClear = true,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    int? maxLines,
    int? maxLength,
    int? coutdown,
    Widget? left,
    Icon? leftIcon,
    FocusNode? focusNode,
    TextAlign textAlign = TextAlign.start,
    TextInputAction? inputAction,
    TextEditingController? controller,
    MaxLengthEnforcement? maxLengthEnforcement,
    VoidCallback? onTap,
    VoidCallback? onClear,
    ValueChanged<String?>? onSaved,
    ValueChanged<String?>? onReset,
    ValueChanged<String?>? onChanged,
    ValueChanged<String?>? onSubmitted,
    VoidCallback? onEditingComplete,
    List<Validator<String>>? validator,
    FieldTransformer<String, String>? renderer,
    FieldTransformer<String, String>? converter,
    FieldTransformer<String, String>? transformer,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldTextCaptcha($name)",
      builder: (ctx, parent, index) => FormXFieldTextCaptcha(
        key: key,
        name: name,
        label: label,
        left: left,
        leftIcon: leftIcon,
        empty: parent.empty,
        placeholder: placeholder,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        maxLength: maxLength,
        maxLengthEnforcement: maxLengthEnforcement,
        focusNode: focusNode,
        textAlign: textAlign,
        inputAction: inputAction,
        controller: controller,
        validator: validator,
        renderer: renderer,
        converter: converter,
        transformer: transformer,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onTap: onTap,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
        onSubmitted: onSubmitted,
        onEditingComplete: onEditingComplete,
      ),
    );
  }

  factory Input.datetime({
    Key? key,
    required String name,
    required String label,
    String? restorationId,
    String? title,
    String? subtitle,
    String? placeholder,
    T? defaultValue,
    bool? enabled,
    bool required = false,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    int? maxLines,
    int? coutdown,
    Widget? left,
    Icon? leftIcon,
    DateTime? initialValue,
    DateTime? minValue,
    DateTime? maxValue,
    String? minValueBy,
    String? maxValueBy,
    int? yearBegin,
    int? yearEnd,
    required DateTimeFormatter formatter,
    ValueChanged<T?>? onSaved,
    ValueChanged<DateTime?>? onReset,
    ValueChanged<DateTime?>? onChanged,
    FieldTransformer<DateTime, String>? renderer,
    FieldTransformer<T, DateTime>? converter,
    FieldTransformer<DateTime, T>? transformer,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldTDateTime($name)",
      builder: (ctx, parent, index) => FormXFieldDateTime<T>(
        key: key,
        name: name,
        label: label,
        title: title,
        subtitle: subtitle,
        left: left,
        leftIcon: leftIcon,
        empty: parent.empty,
        placeholder: placeholder,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        formatter: formatter,
        minValue: minValue,
        maxValue: maxValue,
        maxValueBy: maxValueBy,
        minValueBy: minValueBy,
        yearBegin: yearBegin,
        yearEnd: yearEnd,
        defaultValue: defaultValue,
        renderer: renderer,
        converter: converter,
        transformer: transformer,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
      ),
    );
  }

  factory Input.number({
    Key? key,
    required String name,
    required String label,
    String? restorationId,
    String? title,
    String? subtitle,
    String? placeholder,
    String? postfix,
    String? suffix,
    int? defaultValue,
    bool? enabled,
    bool required = false,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    Widget? left,
    Icon? leftIcon,
    required int minValue,
    required int maxValue,
    ValueChanged<int?>? onSaved,
    ValueChanged<int?>? onReset,
    ValueChanged<int?>? onChanged,
    FieldTransformer<int, int>? converter,
    FieldTransformer<int, int>? transformer,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldNumber($name)",
      builder: (ctx, parent, index) => FormXFieldNumber(
        key: key,
        name: name,
        label: label,
        title: title,
        subtitle: subtitle,
        left: left,
        leftIcon: leftIcon,
        empty: parent.empty,
        placeholder: placeholder,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        minValue: minValue,
        maxValue: maxValue,
        postfix: postfix,
        suffix: suffix,
        defaultValue: defaultValue,
        converter: converter,
        transformer: transformer,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
      ),
    );
  }

  factory Input.select({
    Key? key,
    required String name,
    required String label,
    String? restorationId,
    String? title,
    String? subtitle,
    String? placeholder,
    T? defaultValue,
    bool? enabled,
    bool required = false,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    Widget? left,
    Icon? leftIcon,
    required List<Option<T>> options,
    ValueChanged<T?>? onSaved,
    ValueChanged<T?>? onReset,
    ValueChanged<T?>? onChanged,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldSelect<$T, $T>($name)",
      builder: (ctx, parent, index) => FormXFieldSelect<T, T>(
        key: key,
        name: name,
        label: label,
        title: title,
        subtitle: subtitle,
        left: left,
        leftIcon: leftIcon,
        empty: parent.empty,
        placeholder: placeholder,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        options: options,
        defaultValue: defaultValue,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
      ),
    );
  }

  factory Input.selectList({
    Key? key,
    required String name,
    required String label,
    String? restorationId,
    String? title,
    String? subtitle,
    String? placeholder,
    List<T>? defaultValue,
    bool? enabled,
    bool required = false,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    Widget? left,
    Icon? leftIcon,
    required List<Option<T>> options,
    ValueChanged<List<T>?>? onSaved,
    ValueChanged<List<T>?>? onReset,
    ValueChanged<List<T>?>? onChanged,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldSelect<$T, List<$T>>($name)",
      builder: (ctx, parent, index) => FormXFieldSelect<T, List<T>>(
        key: key,
        name: name,
        label: label,
        title: title,
        subtitle: subtitle,
        left: left,
        leftIcon: leftIcon,
        empty: parent.empty,
        placeholder: placeholder,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        options: options,
        defaultValue: defaultValue,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
      ),
    );
  }

  factory Input.regional({
    Key? key,
    required String name,
    required String label,
    String? restorationId,
    String? title,
    String? subtitle,
    String? placeholder,
    List<String>? defaultValue,
    bool? enabled,
    bool required = false,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    Widget? left,
    Icon? leftIcon,
    ValueChanged<List<String>?>? onSaved,
    ValueChanged<List<String>?>? onReset,
    ValueChanged<List<String>?>? onChanged,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldRegional($name)",
      builder: (ctx, parent, index) => FormXFieldRegional(
        key: key,
        name: name,
        label: label,
        title: title,
        subtitle: subtitle,
        left: left,
        leftIcon: leftIcon,
        empty: parent.empty,
        placeholder: placeholder,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        defaultValue: defaultValue,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
      ),
    );
  }

  factory Input.numberStepper({
    Key? key,
    required String name,
    required String label,
    required int minValue,
    required int maxValue,
    int step = 1,
    double? width,
    String? suffix,
    String? restorationId,
    String? subtitle,
    Widget? left,
    Icon? leftIcon,
    int? defaultValue,
    bool? enabled,
    bool required = false,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    ValueChanged<int?>? onSaved,
    ValueChanged<int?>? onReset,
    ValueChanged<int?>? onChanged,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldNumberStepper($name)",
      builder: (ctx, parent, index) => FormXFieldNumberStepper(
        key: key,
        name: name,
        label: label,
        step: step,
        width: width,
        suffix: suffix,
        left: left,
        leftIcon: leftIcon,
        minValue: minValue,
        maxValue: maxValue,
        empty: parent.empty,
        subtitle: subtitle,
        required: required,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        defaultValue: defaultValue,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
      ),
    );
  }

  factory Input.switcher({
    Key? key,
    required String name,
    required String label,
    String? subtitle,
    String? restorationId,
    Widget? left,
    Icon? leftIcon,
    bool? defaultValue,
    bool? debug,
    bool? enabled,
    bool required = false,
    bool? showOnEnabled,
    bool? hideOnDisabled,
    ValueChanged<bool?>? onSaved,
    ValueChanged<bool?>? onReset,
    ValueChanged<bool?>? onChanged,
  }) {
    return Input(
      showOnEnabled: showOnEnabled,
      hideOnDisabled: hideOnDisabled,
      debugLabel: "FormXFieldSwitcher($name)",
      builder: (ctx, parent, index) => FormXFieldSwitcher(
        key: key,
        name: name,
        label: label,
        left: left,
        leftIcon: leftIcon,
        subtitle: subtitle,
        required: required,
        empty: parent.empty,
        enabled: enabled ?? parent.enabled,
        restorationId: restorationId,
        defaultValue: defaultValue,
        background: parent.background,
        textStyle: parent.textStyle,
        emptyTextStyle: parent.emptyTextStyle,
        subtitleTextStyle: parent.subtitleTextStyle,
        labelTextStyle: parent.labelTextStyle,
        errorTextStyle: parent.errorTextStyle,
        descriptionTextStyle: parent.descriptionTextStyle,
        onSaved: onSaved,
        onReset: onReset,
        onChanged: onChanged,
      ),
    );
  }
}
